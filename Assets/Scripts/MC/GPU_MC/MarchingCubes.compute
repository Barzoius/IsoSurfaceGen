// MarchingCubes.compute
#pragma kernel MarchCube

#include "Include/MC_DATA_TABLES.compute"

struct Triangle {
    float3 a;
    float3 b;
    float3 c;
};

AppendStructuredBuffer<Triangle> triangleBuffer;

RWTexture3D<float> ScalarFieldTexture;

int textureSize;
int gridSize;
float voxelSize;
float isoLevel;
float3 chunkWorldPosition;

static const float3 cornerOffsets[8] = {
    float3(0, 0, 0),
    float3(1, 0, 0),
    float3(1, 1, 0),
    float3(0, 1, 0),
    float3(0, 0, 1),
    float3(1, 0, 1),
    float3(1, 1, 1),
    float3(0, 1, 1)
};

float hash(float2 p) {
    p = frac(p * 0.3183099 + float2(0.1, 0.7));
    p *= 17.0;
    return frac(p.x * p.y * (p.x + p.y));
}

float smoothNoise(float2 p) {
    float2 i = floor(p);
    float2 f = frac(p);

    // Bilinear interpolation of noise
    float a = hash(i);
    float b = hash(i + float2(1, 0));
    float c = hash(i + float2(0, 1));
    float d = hash(i + float2(1, 1));

    float2 u = f * f * (3.0 - 2.0 * f); // smoothstep interpolation

    return lerp(lerp(a, b, u.x), lerp(c, d, u.x), u.y);
}

float fbm(float2 p) {
    float value = 0.0;
    float amp = 1.0;
    float freq = 0.01;

    for (int i = 0; i < 6; i++) {
        value += smoothNoise(p * freq) * amp;
        freq *= 2.0;
        amp *= 0.5;
    }
    return value;
}

float ridgedNoise(float2 p) {
    return 1.0 - abs(smoothNoise(p) * 2.0 - 1.0); // range ~0 to 1
}

float ridgedFBM(float2 p) {
    float total = 0.0;
    float amplitude = 0.2;
    float frequency = 0.01;

    for (int i = 0; i < 5; i++) {
        total += ridgedNoise(p * frequency) * amplitude;
        frequency *= 1.5;
        amplitude *= 0.5;
    }

    return total;
}

float SampleSDF(float3 p) {
    float valley = fbm(p.xz);
    float mountain = ridgedFBM(p.xz);

    // Blend between them
    float height = lerp(valley, mountain * 2.0, 0.6); // tweak blend factor

    return p.y - height * 25.0; // Increase height scale
}



float3 VertexLerp(float3 p1, float3 p2, float v1, float v2) {
    float t = (isoLevel - v1) / (v2 - v1);
    return lerp(p1, p2, t);
}

[numthreads(8, 8, 8)]
void MarchCube(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= gridSize  || id.y >= gridSize   || id.z >= gridSize  )
        return;

    float3 basePos = chunkWorldPosition + (id * voxelSize);

    float densities[8];
    float3 corners[8];

    int cubeIndex = 0;

    for (int i = 0; i < 8; i++) 
    {
        float3 cornerWorld = basePos + cornerOffsets[i] * voxelSize;
        corners[i] = cornerWorld;

        int3 sampleIndex = int3(id + cornerOffsets[i]);

          if (all(sampleIndex >= 0) && all(sampleIndex < textureSize))
             densities[i] = ScalarFieldTexture[sampleIndex];
        else
            densities[i] = 0; // large value outside iso surface

        if (densities[i] < isoLevel)
            cubeIndex |= (1 << i);
    }



    for (int i = 0; i < 16; i += 3) {
        int edgeIndex = triTable[cubeIndex][i];
        if (edgeIndex == -1) break;

        int a0 = cornerIndexAFromEdge[triTable[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triTable[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triTable[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triTable[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triTable[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triTable[cubeIndex][i + 2]];

        float3 v0 = VertexLerp(corners[a0], corners[b0], densities[a0], densities[b0]);
        float3 v1 = VertexLerp(corners[a1], corners[b1], densities[a1], densities[b1]);
        float3 v2 = VertexLerp(corners[a2], corners[b2], densities[a2], densities[b2]);

        Triangle tri;
        tri.a = v0;
        tri.b = v2;
        tri.c = v1;

        triangleBuffer.Append(tri);
    }
}