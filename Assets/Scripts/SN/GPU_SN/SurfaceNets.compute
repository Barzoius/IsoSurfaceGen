// MySurfaceNets.compute

#pragma kernel InitVertices
#pragma kernel GetQuads
#pragma kernel GetTrigs



#define GRID_SIZE 32
#define VOXEL_SIZE 4


struct Edge {
    float3 normal;
    float3 intersection;
    bool crossed;
};

struct Voxel {
    float densities[8];
    float3 cornerPositions[8];
    Edge edgeData[12];
    int INDEX;
    float3 vertex;
    int vid;
};



float CubeSDF(float3 p) {
    float3 center = GRID_SIZE * VOXEL_SIZE * 0.5;
    float3 halfSize = float3(10, 10, 10);
    float3 d = abs(p - center) - halfSize;
    float outside = max(d.x, max(d.y, d.z));
    float inside = min(max(d.x, max(d.y, d.z)), 0.0);
    return outside + inside;
}

float SphereSDF(float3 p) {
    float3 center = GRID_SIZE * VOXEL_SIZE * 0.5;
    float radius = 10.0;
    return length(p - center) - radius;
}

float SampleSDF(float3 p) {
    return max(CubeSDF(p), -SphereSDF(p));
}

float3 computeGradient(float3 p) {
    float eps = 0.01;
    float dx = SampleSDF(p + float3(eps, 0, 0)) - SampleSDF(p - float3(eps, 0, 0));
    float dy = SampleSDF(p + float3(0, eps, 0)) - SampleSDF(p - float3(0, eps, 0));
    float dz = SampleSDF(p + float3(0, 0, eps)) - SampleSDF(p - float3(0, 0, eps));
    return normalize(float3(dx, dy, dz));
}


StructuredBuffer<Voxel> Voxels;


RWStructuredBuffer<float3> Vertices;

// ---------------------------
// KERNEL 1: InitVertices
// ---------------------------
[numthreads(8, 8, 8)]
void InitVertices(uint3 position : SV_DispatchThreadID)
{
    if (position.x + 1 >= GRID_SIZE || position.y + 1 >= GRID_SIZE || position.z + 1 >= GRID_SIZE)
    {
        return;
    }

    float3 VERTEX = float3(0, 0, 0);


}



struct Quad 
{
    float3 vertex1;
    float3 vertex2;
    float3 vertex3;
    float3 vertex4;
};

AppendStructuredBuffer<Quad> Quads;


// ---------------------------
// KERNEL 2: GetQuads
// ---------------------------
[numthreads(8, 8, 8)]
void GetQuads(uint3 id : SV_DispatchThreadID)
{

}






struct QuadIndices 
{
	dword  Index1;
	dword  Index2;
	dword  Index3;
	dword  Index4;
	dword  Index5;
	dword  Index6;
};

RWStructuredBuffer<QuadIndices> Indices;

// ---------------------------
// KERNEL 3: GetTrigs
// ---------------------------
[numthreads(8, 8, 8)]
void GetTrigs(uint3 id : SV_DispatchThreadID)
{

}
