#pragma kernel CreateScalarField

#include "Noise.compute"

RWTexture3D<float> ScalarFieldTexture;

int textureSize;

float voxelSize;
float3 chunkWorldPosition;

float hash(float2 p) {
    p = frac(p * 0.3183099 + float2(0.1, 0.7));
    p *= 17.0;
    return frac(p.x * p.y * (p.x + p.y));
}

float smoothNoise(float2 p) {
    float2 i = floor(p);
    float2 f = frac(p);

    float a = hash(i);
    float b = hash(i + float2(1, 0));
    float c = hash(i + float2(0, 1));
    float d = hash(i + float2(1, 1));

    float2 u = f * f * (3.0 - 2.0 * f);

    return lerp(lerp(a, b, u.x), lerp(c, d, u.x), u.y);
}

float fbm(float2 p) {
    float value = 0.0;
    float amp = 1.0;
    float freq = 0.01;

    for (int i = 0; i < 6; i++) {
        value += smoothNoise(p * freq) * amp;
        freq *= 2.0;
        amp *= 0.5;
    }
    return value;
}

float ridgedNoise(float2 p) {
    return 1.0 - abs(smoothNoise(p) * 2.0 - 1.0);
}

float ridgedFBM(float2 p) {
    float total = 0.0;
    float amplitude = 0.5;
    float frequency = 0.01;

    for (int i = 0; i < 6; i++) {
        float r = ridgedNoise(p * frequency);
        total += r * amplitude;

        frequency *= 2.0;
        amplitude *= 0.5;
    }

    return total;
}

float SampleSDF(float3 p) {
    float valley = fbm(p.xz);
    float mountain = ridgedFBM(p.xz);
    float height = lerp(valley, mountain * 2.0, 0.6); 
    return p.y - height * 25.0;
}

[numthreads(8,8,8)]
void CreateScalarField (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize)
        return;

    float3 worldPos = chunkWorldPosition + (id * voxelSize);
    float fieldValue = SampleSDF(worldPos);

    ScalarFieldTexture[id] = fieldValue;
}
