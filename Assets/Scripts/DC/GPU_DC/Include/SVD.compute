#include "MathOps.compute"


struct GivensCoefficients {
    float c;
    float s;
};

GivensCoefficients calcSymmetricGivensCoefficients(float a_pp, float a_pq, float a_qq)
{
    GivensCoefficients result;

    if (a_pq == 0.0)
    {
        result.c = 1.0;
        result.s = 0.0;
        return result;
    }

    float tau = (a_qq - a_pp) / (2.0 * a_pq);
    float stt = sqrt(1.0 + tau * tau);
    float tan = 1.0 / ((tau >= 0.0) ? (tau + stt) : (tau - stt));
    result.c = 1.0 / sqrt(1.0 + tan * tan);
    result.s = tan * result.c;

    return result;
}


//Schur

void rot01(inout SMat3 m) {
    GivensCoefficients g = calcSymmetricGivensCoefficients(m.m00, m.m01, m.m11);
    float c = g.c, s = g.s;

    float cc = c * c;
    float ss = s * s;
    float mix = 2.0 * c * s * m.m01;

    setSymmetric(m,
        cc * m.m00 - mix + ss * m.m11,
        0.0,
        c * m.m02 - s * m.m12,
        ss * m.m00 + mix + cc * m.m11,
        s * m.m02 + c * m.m12,
        m.m22
    );
}

void rot02(inout SMat3 m) {
    GivensCoefficients g = calcSymmetricGivensCoefficients(m.m00, m.m02, m.m22);
    float c = g.c, s = g.s;

    float cc = c * c;
    float ss = s * s;
    float mix = 2.0 * c * s * m.m02;

    setSymmetric(m,
        cc * m.m00 - mix + ss * m.m22,
        c * m.m01 - s * m.m12,
        0.0,
        m.m11,
        s * m.m01 + c * m.m12,
        ss * m.m00 + mix + cc * m.m22
    );
}

void rot12(inout SMat3 m) {
    GivensCoefficients g = calcSymmetricGivensCoefficients(m.m11, m.m12, m.m22);
    float c = g.c, s = g.s;

    float cc = c * c;
    float ss = s * s;
    float mix = 2.0 * c * s * m.m12;

    setSymmetric(m,
        m.m00,
        c * m.m01 - s * m.m02,
        s * m.m01 + c * m.m02,
        cc * m.m11 - mix + ss * m.m22,
        0.0,
        ss * m.m11 + mix + cc * m.m22
    );
}


// Givens

void rot01_post(inout Mat3 m, float c, float s) {
    float m00 = m.m00, m01 = m.m01, m10 = m.m10, m11 = m.m11, m20 = m.m20, m21 = m.m21;
    m.m00 = c * m00 - s * m01;
    m.m01 = s * m00 + c * m01;
    // m02 unchanged
    m.m10 = c * m10 - s * m11;
    m.m11 = s * m10 + c * m11;
    // m12 unchanged
    m.m20 = c * m20 - s * m21;
    m.m21 = s * m20 + c * m21;
    // m22 unchanged
}

void rot02_post(inout Mat3 m, float c, float s) {
    float m00 = m.m00, m02 = m.m02, m10 = m.m10, m12 = m.m12, m20 = m.m20, m22 = m.m22;
    m.m00 = c * m00 - s * m02;
    m.m02 = s * m00 + c * m02;
    // m01 unchanged
    m.m10 = c * m10 - s * m12;
    m.m12 = s * m10 + c * m12;
    // m11 unchanged
    m.m20 = c * m20 - s * m22;
    m.m22 = s * m20 + c * m22;
    // m21 unchanged
}

void rot12_post(inout Mat3 m, float c, float s) {
    float m01 = m.m01, m02 = m.m02, m11 = m.m11, m12 = m.m12, m21 = m.m21, m22 = m.m22;
    // m00, m10, m20 unchanged
    m.m01 = c * m01 - s * m02;
    m.m02 = s * m01 + c * m02;

    m.m11 = c * m11 - s * m12;
    m.m12 = s * m11 + c * m12;

    m.m21 = c * m21 - s * m22;
    m.m22 = s * m21 + c * m22;
}


// Rotate functions

void rotate01(inout SMat3 vtav, inout Mat3 v)
{
    if (vtav.m01 == 0.0)
    {
        return;
    }

    // Note: Your rot01 modifies vtav in-place and returns Givens coefficients.
    GivensCoefficients g = calcSymmetricGivensCoefficients(vtav.m00, vtav.m01, vtav.m11);
    rot01(vtav); // modifies vtav
    rot01_post(v, g.c, g.s);
}

void rotate02(inout SMat3 vtav, inout Mat3 v)
{
    if (vtav.m02 == 0.0)
    {
        return;
    }

    GivensCoefficients g = calcSymmetricGivensCoefficients(vtav.m00, vtav.m02, vtav.m22);
    rot02(vtav);
    rot02_post(v, g.c, g.s);
}

void rotate12(inout SMat3 vtav, inout Mat3 v)
{
    if (vtav.m12 == 0.0)
    {
        return;
    }

    GivensCoefficients g = calcSymmetricGivensCoefficients(vtav.m11, vtav.m12, vtav.m22);
    rot12(vtav);
    rot12_post(v, g.c, g.s);
}


// Symmetric SVD with Jacobi sweeps

void getSymmetricSvd(in SMat3 a, out SMat3 vtav, out Mat3 v, float tol, int max_sweeps)
{
    vtav = a;  

    set1Diag(v);

    float delta = tol * fnorm(vtav);

    for (int i = 0; i < max_sweeps; ++i)
    {
        if (off(vtav) <= delta)
            break;

        rotate01(vtav, v);
        rotate02(vtav, v);
        rotate12(vtav, v);
    }
}

// Calculate least squares error for Ax=b
float calcError(Mat3 A, float3 x, float3 b)
{
    
    float3 vtmp = vmul(A, x);
    vtmp = b - vtmp;
    return dot(vtmp, vtmp);
}


float calcError(SMat3 origA, float3 x, float3 b)
{
    Mat3 A;
    clear(A);
    setSymmetric(A, origA.m00, origA.m01, origA.m02,
                    origA.m11, origA.m12, origA.m22);
    return calcError(A, x, b);
}

// Pseudoinverse helper for scalars
float pinv(float x, float tol)
{
    return abs(x) < tol ? 0.0 : (1.0 / x);
}

// Pseudoinverse for symmetric 3x3 matrices given SVD diagonal and rotation matrix
void pseudoinverse(out Mat3 Out, SMat3 d, Mat3 v, float tol)
{
    float d0 = pinv(d.m00, tol);
    float d1 = pinv(d.m11, tol);
    float d2 = pinv(d.m22, tol);

    set(Out,
        v.m00 * d0 * v.m00 + v.m01 * d1 * v.m01 + v.m02 * d2 * v.m02,
        v.m00 * d0 * v.m10 + v.m01 * d1 * v.m11 + v.m02 * d2 * v.m12,
        v.m00 * d0 * v.m20 + v.m01 * d1 * v.m21 + v.m02 * d2 * v.m22,

        v.m10 * d0 * v.m00 + v.m11 * d1 * v.m01 + v.m12 * d2 * v.m02,
        v.m10 * d0 * v.m10 + v.m11 * d1 * v.m11 + v.m12 * d2 * v.m12,
        v.m10 * d0 * v.m20 + v.m11 * d1 * v.m21 + v.m12 * d2 * v.m22,

        v.m20 * d0 * v.m00 + v.m21 * d1 * v.m01 + v.m22 * d2 * v.m02,
        v.m20 * d0 * v.m10 + v.m21 * d1 * v.m11 + v.m22 * d2 * v.m12,
        v.m20 * d0 * v.m20 + v.m21 * d1 * v.m21 + v.m22 * d2 * v.m22
    );
}

// Solve Ax = b with symmetric matrix A using SVD-based pseudoinverse
float solveSymmetric(SMat3 A, float3 b, out float3 x, float svd_tol, int svd_sweeps, float pinv_tol)
{
    Mat3 pinvMat;
    Mat3 V;
    SMat3 VTAV;

    getSymmetricSvd(A, VTAV, V, svd_tol, svd_sweeps);
    pseudoinverse(pinvMat, VTAV, V, pinv_tol);

    x = vmul(pinvMat, b);

    return calcError(A, x, b);
}

// Solve least squares for general matrix a and right side b
float solveLeastSquares(Mat3 a, float3 b, out float3 x, float svd_tol, int svd_sweeps, float pinv_tol)
{
    Mat3 at;
    SMat3 ata;
    float3 atb;

    transpose(at, a);
    mmul_ata(ata, a);
    atb = vmul(at, b);

    return solveSymmetric(ata, atb, x, svd_tol, svd_sweeps, pinv_tol);
}
