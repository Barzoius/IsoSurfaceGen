
#ifndef MATHOPS_COMPUTE_INCLUDED
#define MATHOPS_COMPUTE_INCLUDED

#include "Mat3.compute"
#include "SMat3.compute"



float fnorm(Mat3 a)
{
    return sqrt(
        a.m00 * a.m00 + a.m01 * a.m01 + a.m02 * a.m02 +
        a.m10 * a.m10 + a.m11 * a.m11 + a.m12 * a.m12 +
        a.m20 * a.m20 + a.m21 * a.m21 + a.m22 * a.m22
    );
}

float fnorm(SMat3 a)
{
    return sqrt(
        a.m00 * a.m00 + a.m01 * a.m01 + a.m02 * a.m02 +
        a.m01 * a.m01 + a.m11 * a.m11 + a.m12 * a.m12 +
        a.m02 * a.m02 + a.m12 * a.m12 + a.m22 * a.m22
    );
}


float off(Mat3 a)
{
    return sqrt(
        a.m01 * a.m01 + a.m02 * a.m02 +
        a.m10 * a.m10 + a.m12 * a.m12 +
        a.m20 * a.m20 + a.m21 * a.m21
    );
}

float off(SMat3 a)
{
    return sqrt(2 * (
        a.m01 * a.m01 + a.m02 * a.m02 + a.m12 * a.m12
    ));
}

void mmul(out Mat3 Out, Mat3 a, Mat3 b)
{
    Out.m00 = a.m00 * b.m00 + a.m01 * b.m10 + a.m02 * b.m20;
    Out.m01 = a.m00 * b.m01 + a.m01 * b.m11 + a.m02 * b.m21;
    Out.m02 = a.m00 * b.m02 + a.m01 * b.m12 + a.m02 * b.m22;

    Out.m10 = a.m10 * b.m00 + a.m11 * b.m10 + a.m12 * b.m20;
    Out.m11 = a.m10 * b.m01 + a.m11 * b.m11 + a.m12 * b.m21;
    Out.m12 = a.m10 * b.m02 + a.m11 * b.m12 + a.m12 * b.m22;

    Out.m20 = a.m20 * b.m00 + a.m21 * b.m10 + a.m22 * b.m20;
    Out.m21 = a.m20 * b.m01 + a.m21 * b.m11 + a.m22 * b.m21;
    Out.m22 = a.m20 * b.m02 + a.m21 * b.m12 + a.m22 * b.m22;
}

void mmul_ata(out SMat3 Out, Mat3 a)
{
    Out.m00 = a.m00 * a.m00 + a.m10 * a.m10 + a.m20 * a.m20;
    Out.m01 = a.m00 * a.m01 + a.m10 * a.m11 + a.m20 * a.m21;
    Out.m02 = a.m00 * a.m02 + a.m10 * a.m12 + a.m20 * a.m22;
    Out.m11 = a.m01 * a.m01 + a.m11 * a.m11 + a.m21 * a.m21;
    Out.m12 = a.m01 * a.m02 + a.m11 * a.m12 + a.m21 * a.m22;
    Out.m22 = a.m02 * a.m02 + a.m12 * a.m12 + a.m22 * a.m22;
}


void transpose(out Mat3 Out, Mat3 a)
{
    Out.m00 = a.m00; Out.m01 = a.m10; Out.m02 = a.m20;
    Out.m10 = a.m01; Out.m11 = a.m11; Out.m12 = a.m21;
    Out.m20 = a.m02; Out.m21 = a.m12; Out.m22 = a.m22;
}

float3 vmul(Mat3 a, float3 v)
{
    return float3(
        a.m00 * v.x + a.m01 * v.y + a.m02 * v.z,
        a.m10 * v.x + a.m11 * v.y + a.m12 * v.z,
        a.m20 * v.x + a.m21 * v.y + a.m22 * v.z
    );
}

float3 vmul_symmetric(SMat3 a, float3 v)
{
    return float3(
        a.m00 * v.x + a.m01 * v.y + a.m02 * v.z,
        a.m01 * v.x + a.m11 * v.y + a.m12 * v.z,
        a.m02 * v.x + a.m12 * v.y + a.m22 * v.z
    );
}

#endif